{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulussimanjuntak/Desktop/react-hydrotech/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Layout, notification } from \"antd\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport Container from \"react-bootstrap/Container\";\nimport isEqual from \"validator/lib/equals\";\nimport isEmpty from \"validator/lib/isEmpty\";\nimport LoginComponent from \"./components/Login\";\nimport { formLogin, formLoginIsValid } from \"./formdata/formLogin\";\nconst EMAIL = \"hydro@gmail.com\";\nconst PASSWORD = \"asdasd\";\nconst IP = \"192.168.18.229:81\";\n\nconst App = () => {\n  _s();\n\n  const [login, setLogin] = useState(formLogin);\n  const [isLogin, setIsLogin] = useState(false);\n  const [statistic, setStatistic] = useState([{\n    suhu: \"0\",\n    nutrisi: \"0\",\n    ph: \"0\"\n  }]);\n  const {\n    email,\n    password\n  } = login;\n\n  const inputChangeHandler = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    if (isEmpty(value || \"\", {\n      ignore_whitespace: true\n    })) {\n      const data = { ...login,\n        [name]: { ...login[name],\n          value: value,\n          isValid: false,\n          message: \"Kolom tidak boleh kosong\"\n        }\n      };\n      setLogin(data);\n    } else {\n      const data = { ...login,\n        [name]: { ...login[name],\n          value: value,\n          isValid: true,\n          message: null\n        }\n      };\n      setLogin(data);\n    }\n  };\n\n  const submitLoginHandler = () => {\n    if (formLoginIsValid(login, setLogin)) {\n      if (isEqual(email.value, EMAIL) && isEqual(password.value, PASSWORD)) {\n        notification.success({\n          message: \"Success\",\n          description: \"Selamat datang Hydropronics\"\n        });\n        setIsLogin(true);\n        const dataWS = new W3CWebSocket(`ws://${IP}`, ['arduino']);\n\n        dataWS.onmessage = message => {\n          if (message.data !== \"Connected\") {\n            if (typeof message.data == \"string\") {\n              let dataObj = {};\n              const data = message.data.split(\",\");\n\n              for (let val of data) {\n                dataObj[val.split(\":\")[0]] = val.split(\":\")[1];\n              }\n\n              setStatistic(data => [...data, dataObj]);\n            }\n          }\n        };\n      } else {\n        setIsLogin(false);\n        notification.error({\n          message: \"Error\",\n          description: \"Akun tidak terdaftar\"\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLogin ? /*#__PURE__*/_jsxDEV(Layout, {\n      className: \"bg-white\",\n      children: /*#__PURE__*/_jsxDEV(Layout.Content, {\n        children: /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(LoginComponent, {\n      state: login,\n      onChange: inputChangeHandler,\n      submit: submitLoginHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"55tnjuzh6d0UafzvC6cFtex9wes=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/paulussimanjuntak/Desktop/react-hydrotech/src/App.js"],"names":["useState","Layout","notification","w3cwebsocket","W3CWebSocket","Container","isEqual","isEmpty","LoginComponent","formLogin","formLoginIsValid","EMAIL","PASSWORD","IP","App","login","setLogin","isLogin","setIsLogin","statistic","setStatistic","suhu","nutrisi","ph","email","password","inputChangeHandler","e","name","target","value","ignore_whitespace","data","isValid","message","submitLoginHandler","success","description","dataWS","onmessage","dataObj","split","val","error"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Layout, notification } from \"antd\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\nimport Container from \"react-bootstrap/Container\";\nimport isEqual from \"validator/lib/equals\";\nimport isEmpty from \"validator/lib/isEmpty\";\n\nimport LoginComponent from \"./components/Login\"\n\nimport { formLogin, formLoginIsValid } from \"./formdata/formLogin\";\n\nconst EMAIL = \"hydro@gmail.com\";\nconst PASSWORD = \"asdasd\";\nconst IP = \"192.168.18.229:81\";\n\nconst App = () => {\n  const [login, setLogin] = useState(formLogin);\n  const [isLogin, setIsLogin] = useState(false);\n  const [statistic, setStatistic] = useState([ { suhu: \"0\", nutrisi: \"0\", ph: \"0\" } ]);\n\n  const { email, password } = login;\n\n  const inputChangeHandler = e => {\n    const name = e.target.name\n    const value = e.target.value\n\n    if(isEmpty(value || \"\", { ignore_whitespace: true })){\n      const data = {\n        ...login,\n        [name]: {\n          ...login[name],\n          value: value,\n          isValid: false,\n          message: \"Kolom tidak boleh kosong\",\n        },\n      };\n      setLogin(data);\n    } else {\n      const data = {\n        ...login,\n        [name]: {\n          ...login[name],\n          value: value,\n          isValid: true,\n          message: null,\n        },\n      };\n      setLogin(data);\n    }\n  }\n\n  const submitLoginHandler = () => {\n    if(formLoginIsValid(login, setLogin)){\n      if(isEqual(email.value, EMAIL) && isEqual(password.value, PASSWORD)){\n        notification.success({\n          message: \"Success\",\n          description: \"Selamat datang Hydropronics\",\n        });\n        setIsLogin(true);\n\n        const dataWS = new W3CWebSocket(`ws://${IP}`, ['arduino']);\n\n        dataWS.onmessage = message => {\n          if(message.data !== \"Connected\"){\n            if(typeof message.data == \"string\") {\n              let dataObj = {}\n              const data = message.data.split(\",\")\n              for(let val of data) {\n                dataObj[val.split(\":\")[0]] = val.split(\":\")[1]\n              }\n              setStatistic(data => [...data, dataObj])\n            }\n          }\n        }\n\n      } else {\n        setIsLogin(false);\n        notification.error({\n          message: \"Error\",\n          description: \"Akun tidak terdaftar\",\n        });\n      }\n    }\n  }\n\n  return(\n    <>\n      {isLogin ? (\n        <Layout className=\"bg-white\">\n          <Layout.Content>\n            <Container>\n\n            </Container>\n          </Layout.Content>\n        </Layout>\n      ) : (\n        <LoginComponent \n          state={login} \n          onChange={inputChangeHandler} \n          submit={submitLoginHandler} \n        />\n      )}\n    </>\n  )\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}