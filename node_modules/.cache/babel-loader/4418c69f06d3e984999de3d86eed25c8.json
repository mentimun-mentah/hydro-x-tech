{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/paulussimanjuntak/Desktop/react-hydrotech/src/Test.js\";\nimport React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nconst IP = \"192.168.18.229:81\";\n\nclass GraphWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateData = () => {\n      let {\n        data\n      } = this.state.series[0];\n      this.setState({\n        series: [{\n          data\n        }]\n      }, () => ApexCharts.exec(\"realtime\", \"updateSeries\", this.state.series));\n    };\n\n    this.state = {\n      options: {\n        chart: {\n          id: \"realtime\",\n          animations: {\n            enabled: true,\n            easing: \"linear\",\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: \"smooth\"\n        },\n        title: {\n          text: \"dynamic updating chart\",\n          align: \"left\"\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime',\n          range: 10\n        },\n        yaxis: {\n          min: 0\n        },\n        legend: {\n          show: false\n        }\n      },\n      series: [{\n        data: []\n      }]\n    };\n  }\n\n  componentDidMount() {\n    const dataWS = new W3CWebSocket(`ws://${IP}`, ['arduino']);\n\n    dataWS.onmessage = message => {\n      if (message.data !== \"Connected\") {\n        if (typeof message.data == \"string\") {\n          let dataObj = {};\n          const datas = message.data.split(\",\");\n\n          for (let val of datas) {\n            dataObj[val.split(\":\")[0]] = val.split(\":\")[1];\n          }\n\n          const x = Math.floor(new Date().getTime() / 1000);\n          const y = dataObj['ph'];\n          let {\n            data\n          } = this.state.series[0];\n          data.push({\n            x,\n            y\n          });\n          console.log(y);\n        }\n      }\n    };\n\n    this.updateInterval = setInterval(() => this.updateData(), 500);\n  }\n\n  render() {\n    const {\n      options,\n      series\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mixed-chart\",\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        options: options,\n        series: series,\n        type: \"line\",\n        height: \"350\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GraphWrapper;","map":{"version":3,"sources":["/Users/paulussimanjuntak/Desktop/react-hydrotech/src/Test.js"],"names":["React","Component","Chart","ApexCharts","w3cwebsocket","W3CWebSocket","IP","GraphWrapper","constructor","props","updateData","data","state","series","setState","exec","options","chart","id","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","xaxis","type","range","yaxis","min","legend","componentDidMount","dataWS","onmessage","message","dataObj","datas","split","val","x","Math","floor","Date","getTime","y","push","console","log","updateInterval","setInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\nconst IP = \"192.168.18.229:81\";\n\nclass GraphWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: {\n        chart: {\n          id: \"realtime\",\n          animations: {\n            enabled: true,\n            easing: \"linear\",\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: \"smooth\"\n        },\n        title: {\n          text: \"dynamic updating chart\",\n          align: \"left\"\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime',\n          range: 10\n        },\n        yaxis: {\n          min: 0\n        },\n        legend: {\n          show: false\n        }\n      },\n      series: [{ data: [] }]\n    };\n  }\n\n  componentDidMount() {\n    const dataWS = new W3CWebSocket(`ws://${IP}`, ['arduino']);\n\n    dataWS.onmessage = message => {\n      if(message.data !== \"Connected\"){\n        if(typeof message.data == \"string\") {\n          let dataObj = {}\n          const datas = message.data.split(\",\")\n          for(let val of datas) {\n            dataObj[val.split(\":\")[0]] = val.split(\":\")[1]\n          }\n          const x = Math.floor(new Date().getTime() / 1000);\n          const y = dataObj['ph']\n          let { data } = this.state.series[0];\n          data.push({x,y})\n          console.log(y)\n        }\n      }\n    }\n    this.updateInterval = setInterval(() => this.updateData(), 500);\n  }\n\n  updateData = () => {\n    let { data } = this.state.series[0];\n    this.setState({ series: [{ data }] }, () =>\n      ApexCharts.exec(\"realtime\", \"updateSeries\", this.state.series)\n    );\n  };\n\n  render() {\n    const { options, series } = this.state;\n\n    return (\n      <div className=\"mixed-chart\">\n        <Chart options={options} series={series} type=\"line\" height=\"350\" />\n      </div>\n    );\n  }\n}\n\nexport default GraphWrapper;\n"]},"metadata":{},"sourceType":"module"}