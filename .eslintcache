[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/formdata/formLogin.js":"4","/app/src/components/Login/index.js":"5","/app/src/components/Drawer/index.js":"6","/app/src/data/graphic.js":"7","/app/src/formdata/formEditValue.js":"8","/app/src/components/Graph/Suhu.jsx":"9","/app/src/components/Graph/Air.jsx":"10"},{"size":360,"mtime":1617185834784,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611684991961,"results":"13","hashOfConfig":"12"},{"size":11923,"mtime":1620579505811,"results":"14","hashOfConfig":"12"},{"size":1209,"mtime":1617183495740,"results":"15","hashOfConfig":"12"},{"size":3014,"mtime":1617183198633,"results":"16","hashOfConfig":"12"},{"size":4334,"mtime":1622635153810,"results":"17","hashOfConfig":"12"},{"size":1621,"mtime":1611684991961,"results":"18","hashOfConfig":"12"},{"size":318,"mtime":1620579504539,"results":"19","hashOfConfig":"12"},{"size":1772,"mtime":1611684991961,"results":"20","hashOfConfig":"12"},{"size":956,"mtime":1617181516708,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"iewb0n",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/app/src/index.js",[],["45","46"],"/app/src/reportWebVitals.js",[],"/app/src/App.js",["47","48","49","50"],"import { useEffect, useState } from \"react\";\nimport { Layout, notification, Row, Col, Switch } from \"antd\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\nimport Chart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport isEqual from \"validator/lib/equals\";\nimport isEmpty from \"validator/lib/isEmpty\";\n\nimport Nav from \"react-bootstrap/Nav\";\nimport Card from \"react-bootstrap/Card\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\n\nimport LoginComponent from \"./components/Login\"\nimport DrawerComponent from \"./components/Drawer\"\nimport SuhuGraph from \"./components/Graph/Suhu\"\nimport AirGraph from \"./components/Graph/Air\"\n\nimport { formLogin, formLoginIsValid } from \"./formdata/formLogin\";\nimport { formEditValue } from './formdata/formEditValue'\nimport { defaultOptionPH } from \"./data/graphic\"\n\nconst EMAIL = process.env.REACT_APP_EMAIL;\nconst PASSWORD = process.env.REACT_APP_PASSWORD;\nconst PH_UP = process.env.REACT_APP_PH_UP;\nconst PH_DOWN = process.env.REACT_APP_PH_DOWN;\nconst NUTRISI = process.env.REACT_APP_NUTRISI;\n\nconst App = () => {\n  const [login, setLogin] = useState(formLogin);\n  const [setting, setSetting] = useState(formEditValue);\n  const [isLogin, setIsLogin] = useState(false);\n  const [statistic, setStatistic] = useState([ { sh: \"0\", tds: \"0\", ldr: \"0\", td: \"0\", ph: \"0\" } ]);\n  const [series, setSeries] = useState([ { data: [] } ])\n  const [showDrawer, setShowDrawer] = useState(false)\n  const [client, setClient] = useState();\n\n  const { email, password, ipwebsocket } = login;\n  const { ph_up, ph_down, tds } = setting\n\n  // Fungsi untuk mengubah value untuk login\n  const inputChangeHandler = e => {\n    const name = e.target.name\n    const value = e.target.value\n\n    // Ngecek jika value kosong\n    if(isEmpty(value || \"\", { ignore_whitespace: true })){\n      const data = {\n        ...login,\n        [name]: { ...login[name], value: value, isValid: false, message: \"Kolom tidak boleh kosong\", },\n      };\n      setLogin(data);\n    } else {\n      // set data ke state\n      const data = {\n        ...login,\n        [name]: { ...login[name], value: value, isValid: true, message: null, },\n      };\n      setLogin(data);\n    }\n  }\n\n  // fungsi tombol untuk login dan koneksi ke web socket\n  const submitLoginHandler = () => {\n    // ngecek jika value untuk login sudah tervalidasi\n    if(formLoginIsValid(login, setLogin)){\n      // jika value sudah sesuai\n      if(isEqual(email.value, EMAIL) && isEqual(password.value, PASSWORD)){\n        notification.success({\n          message: \"Success\",\n          description: \"Selamat datang Hydropronic\",\n        });\n        setIsLogin(true);\n\n        // fungsi untuk koneksi menggunakan websocket\n        const dataWS = new W3CWebSocket(`ws://${ipwebsocket.value}:81`, ['arduino']);\n        setClient(dataWS); //set websocket ke state untuk digunakan saat mengubah value\n\n        // fungsi untuk menerima data dari websocket\n        dataWS.onmessage = message => {\n          if(message.data !== \"Connected\"){\n            if(typeof message.data == \"string\") {\n\n              if(message.data.startsWith(\"setting|\")){\n                let dataSettingObj = {}\n                const dataSetting = message.data.split(\"|\")\n                dataSetting.shift()\n\n                for(let val of dataSetting) {\n                  dataSettingObj[val.split(\":\")[0]] = val.split(\":\")[1]\n                }\n\n                const settingWs = {...setting}\n                for (const [key, value] of Object.entries(dataSettingObj)) {\n                  if(key === \"pu\") settingWs[\"ph_up\"] = {value: parseFloat(value), isValid: true, message: null}\n                  if(key === \"pd\") settingWs[\"ph_down\"] = {value: parseFloat(value), isValid: true, message: null}\n                  if(key === \"kp\") settingWs[\"kalibrasi_ph\"] = {value: parseInt(value), isValid: true, message: null}\n                  if(key === \"kt\") settingWs[\"kalibrasi_tds\"] = {value: parseInt(value), isValid: true, message: null}\n                  if(key === \"st\") settingWs[\"tds\"] = {value: parseInt(value), isValid: true, message: null}\n                }\n                setSetting(settingWs)\n              } else {\n                let dataObj = {}\n                const dataMsg = message.data.split(\",\")\n\n                for(let val of dataMsg) {\n                  dataObj[val.split(\":\")[0]] = val.split(\":\")[1]\n                }\n                setStatistic(data => [...data, dataObj]) // fungsi untuk update data ke state dari arduino\n                \n                const x = Math.floor(new Date().getTime() / 1000); // data time\n                const y = dataObj['ph'] // data pH untuk grafik\n\n                let { data } = series[0]; \n                data.push({x,y})\n                setSeries([{ data }])\n                ApexCharts.exec(\"realtime\", \"updateSeries\", series) // fungsi untuk update chart realtime\n              }\n\n            }\n          }\n        }\n      } else { // jika akun tidak valid\n        setIsLogin(false);\n        notification.error({\n          message: \"Error\",\n          description: \"Akun tidak terdaftar\",\n        });\n      }\n    }\n  }\n\n  let ph = statistic.map(data => parseFloat(data.ph)) // membuat array untuk data pH\n  const suhu = statistic.map(data => parseInt(data.sh)) // membuat array untuk data suhu\n  const nutrisi = statistic.map(data => parseInt(data.tds)) // membuat array unutk data nutrisi\n  const cahaya = statistic.map(data => parseInt(data.ldr)) // membuat array unutk data intensitas cahaya\n  const ta = statistic.map(data => parseInt(data.ta)) // membuat array unutk data tinggi air\n\n  // option konfigurasi untuk grafik\n  const optionPH = {\n    ...defaultOptionPH,\n    title: {\n      text: parseFloat(ph[ph.length - 1]) ? parseFloat(ph[ph.length - 1]) : 0 + ' pH', // data pH\n      offsetX: 30,\n      style: {\n        fontSize: '24px',\n        cssClass: 'display-4'\n      }\n    },\n  }\n\n  // fungsi untuk menampilkan drawer untuk ngeset value\n  const showDrawerHandler = () => {\n    setShowDrawer(true)\n  }\n  // fungsi untuk menutup drawer untuk ngeset value\n  const closeDrawerHandler = () => {\n    setShowDrawer(false)\n  }\n\n  const phValue = parseFloat(ph[ph.length - 1]) // data pH terbaru\n  const isOnPHUp = phValue > parseFloat(ph_up.value) // ketentuan untuk pompa pH UP menyala\n  const isOnPHDown = phValue < parseFloat(ph_down.value) // ketentuan untuk pompa pH Down menyala\n  const isOnNutrisi = parseInt(nutrisi[nutrisi.length - 1]) < parseInt(tds.value) // ketentuan untuk pompa nutrisi menyala\n\n  useEffect(() => {\n    if(isLogin){\n      const data = {\n        ...setting,\n        ph_up: { value: PH_UP, isValid: true, message: null },\n        ph_down: { value: PH_DOWN, isValid: true, message: null },\n        tds: { value: NUTRISI, isValid: true, message: null },\n      }\n      setSetting(data)\n    }\n  }, [isLogin])\n\n  // fungsi untuk mengirimkan notifikasi\n  useEffect(() => {\n    if(isLogin){\n      if(isOnPHUp){\n        notification.success({\n          message: \"Pompa pH up\",\n          description: \"Pompa pH up dihidupkan\",\n        });\n      } else {\n        notification.success({\n          message: \"Pompa pH up\",\n          description: \"Pompa pH up dimatikan\",\n        });\n      }\n    }\n\n  },[isOnPHUp])\n\n  // fungsi untuk mengirimkan notifikasi\n  useEffect(() => {\n    if(isLogin){\n      if(isOnPHDown){\n        notification.success({\n          message: \"Pompa pH down\",\n          description: \"Pompa pH down dihidupkan\",\n        });\n      } else {\n        notification.success({\n          message: \"Pompa pH down\",\n          description: \"Pompa pH down dimatikan\",\n        });\n      }\n    }\n  },[isOnPHDown])\n\n  // fungsi untuk mengirimkan notifikasi\n  useEffect(() => {\n    if(isLogin){\n      if(isOnNutrisi){\n        notification.success({\n          message: \"Pompa nutrisi\",\n          description: \"Pompa nutrisi dihidupkan\",\n        });\n      } else {\n        notification.success({\n          message: \"Pompa nutrisi\",\n          description: \"Pompa nutrisi dimatikan\",\n        });\n      }\n    }\n  },[isOnNutrisi])\n\n  return(\n    <>\n      {isLogin ? (\n        <>\n        <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n          <Container>\n            <Navbar.Brand className=\"font-weight-bold\">HYDRO X TECH</Navbar.Brand>\n            <Nav className=\"ml-auto\">\n              <Nav.Link onClick={showDrawerHandler}>Set Value</Nav.Link>\n              <Nav.Link onClick={() => setIsLogin(false)}>Logout</Nav.Link>\n            </Nav>\n          </Container>\n        </Navbar>\n        <Layout className=\"bg-transparent mt-5\">\n          <Layout.Content>\n            <Container>\n              <Row gutter={[16, 16]}>\n\n                <Col lg={16} md={24} sm={24} xs={24}>\n                  <Card className=\"mb-2 shadow\">\n                    <Chart options={optionPH} series={series} height={428} />\n                  </Card>\n                </Col>\n\n                <Col lg={8} md={24} sm={24} xs={24}>\n                  <Card className=\"mb-3 shadow\">\n                    <Card.Body className=\"p-2\">\n                      <h5 className=\"mb-n2\">Suhu</h5>\n                      <SuhuGraph data={parseInt(suhu[suhu.length - 1]) ? parseInt(suhu[suhu.length - 1]) : 0} />\n                    </Card.Body>\n                  </Card>\n\n                  <Card className=\"mb-3 shadow\">\n                    <Card.Body className=\"p-2\">\n                      <h5>Tinggi Air</h5>\n                      <AirGraph data={parseInt(ta[ta.length - 1]) ? parseInt(ta[ta.length - 1]) : 0} />\n                    </Card.Body>\n                  </Card>\n                </Col>\n\n              </Row>\n\n              <Row gutter={16} className=\"mb-5\">\n                <Col span={8}>\n                  <Card className=\"mb-3 shadow h-100 p-2\">\n                    <h5>Nutrisi</h5>\n                    <Card.Body className=\"p-2 align-items-center d-flex justify-content-center\">\n                      <h2 className=\"text-center display-4 mb-0\">\n                        {parseInt(nutrisi[nutrisi.length - 1]) ? parseInt(nutrisi[nutrisi.length - 1]) : 0} ppm\n                      </h2>\n                    </Card.Body>\n                  </Card>\n                </Col>\n\n                <Col span={8}>\n                  <Card className=\"mb-3 shadow h-100 p-2\">\n                    <h5>Intensitas Cahaya</h5>\n                    <Card.Body className=\"p-2 align-items-center d-flex justify-content-center\">\n                      <h2 className=\"text-center display-4 mb-0\">\n                        {parseInt(cahaya[cahaya.length - 1]) ? parseInt(cahaya[cahaya.length - 1]) : 0} lux\n                      </h2>\n                    </Card.Body>\n                  </Card>\n                </Col>\n                \n                <Col span={8}>\n                  <Card className=\"shadow\">\n                    <Card.Body className=\"p-2 text-center\">\n                      <h5 className=\"text-left\">Pompa</h5>\n                      <p>pH Up: <Switch checkedChildren=\"On\" unCheckedChildren=\"Off\"  checked={isOnPHUp} /></p> \n                      <p>pH Down: <Switch checkedChildren=\"On\" unCheckedChildren=\"Off\"  checked={isOnPHDown} /></p> \n                      <p>Nutrisi: <Switch checkedChildren=\"On\" unCheckedChildren=\"Off\"  checked={isOnNutrisi} /></p> \n                    </Card.Body>\n                  </Card>\n                </Col>\n\n              </Row>\n            </Container>\n          </Layout.Content>\n        </Layout>\n        </>\n      ) : (\n        <LoginComponent // Komponent untuk login\n          state={login} \n          onChange={inputChangeHandler} \n          submit={submitLoginHandler} \n        />\n      )}\n\n      <DrawerComponent // komponent untuk merubah setting\n        visible={showDrawer}\n        onClose={closeDrawerHandler}\n        client={client}\n        setting={setting}\n        setSetting={setSetting}\n      />\n\n    </>\n  )\n};\n\nexport default App;\n","/app/src/formdata/formLogin.js",[],"/app/src/components/Login/index.js",[],["51","52"],"/app/src/components/Drawer/index.js",[],"/app/src/data/graphic.js",[],"/app/src/formdata/formEditValue.js",[],"/app/src/components/Graph/Suhu.jsx",[],"/app/src/components/Graph/Air.jsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":177,"column":6,"nodeType":"59","endLine":177,"endColumn":15,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":195,"column":5,"nodeType":"59","endLine":195,"endColumn":15,"suggestions":"62"},{"ruleId":"57","severity":1,"message":"61","line":212,"column":5,"nodeType":"59","endLine":212,"endColumn":17,"suggestions":"63"},{"ruleId":"57","severity":1,"message":"61","line":229,"column":5,"nodeType":"59","endLine":229,"endColumn":18,"suggestions":"64"},{"ruleId":"53","replacedBy":"65"},{"ruleId":"55","replacedBy":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setting'. Either include it or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has a missing dependency: 'isLogin'. Either include it or remove the dependency array.",["70"],["71"],["72"],["67"],["68"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [isLogin, setting]",{"range":"81","text":"82"},"Update the dependencies array to be: [isLogin, isOnPHUp]",{"range":"83","text":"84"},"Update the dependencies array to be: [isLogin, isOnPHDown]",{"range":"85","text":"86"},"Update the dependencies array to be: [isLogin, isOnNutrisi]",{"range":"87","text":"88"},[6884,6893],"[isLogin, setting]",[7279,7289],"[isLogin, isOnPHUp]",[7684,7696],"[isLogin, isOnPHDown]",[8092,8105],"[isLogin, isOnNutrisi]"]